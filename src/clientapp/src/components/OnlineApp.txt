import React from "react";
import { useForm, SubmitHandler } from "react-hook-form";
// import { DevTool } from "@hookform/devtools";
import moment from "moment";
import {
  Button,
  TextField,
  CssBaseline,
  Grid,
  Typography,
  RadioGroup,
  FormControlLabel,
  Radio,
  makeStyles,
  Theme,
  createStyles,
  Paper,
  Box,
} from "@material-ui/core";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers";

type FormData = {
  Email: string;
  // DOB: Date;
  FirstName: string;
  MiddleName?: string;
  LastName: string;
  Address: string;
  AddressExt?: string;
  City: string;
  ZipCode: string;
  PhoneNumber: string;
  PhoneNumberExt: string;
  AlternatePhone: string;
};

const schema = yup.object().shape({
  FirstName: yup.string().required("First name is required"),
  LastName: yup.string().required("Last name is required"),
  Address: yup.string().required("Address is required"),
  City: yup.string().required("City is required"),
  ZipCode: yup.string().required("Zip is required"),
  PhoneNumber: yup.string().required("Phone is required"),
  Email: yup
    .string()
    .required("Email address is required")
    .email("Invalid email address"),
  // DOB: yup.string().test("DOB", "Must be at least 16.", (value) => {
  //   return moment().diff(moment(value), "years") >= 16;
  // }),
});

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
      display: "flex",
    },
    grid: {
      width: "100%",
      margin: 0,
    },
    fullWidth: {
      width: "100%",
    },
    formItem: {
      textAlign: "left",
    },
  })
);

 const OnlineApp = () => {
  const classes = useStyles();
  const { register, control, handleSubmit, errors } = useForm<FormData>({
    resolver: yupResolver(schema),
  });

  const onSubmit: SubmitHandler<FormData> = (data) =>
    console.log(JSON.stringify(data));

  return (
      <form noValidate onSubmit={handleSubmit(onSubmit)}>
        <Grid container className={classes.grid} spacing={3}>
         
          <Grid item className={classes.formItem} xs={4} sm={2}>
            <TextField
              label="First Name"
              type="text"
              id="FirstName"
              name="FirstName"
              inputProps={{ maxLength: 200 }}
              size="small"
              variant="outlined"
              helperText={errors.FirstName?.message}
              error={!!errors.FirstName}
              inputRef={register()}
            />
          </Grid>
          <Grid item className={classes.formItem} xs={2}>
            <TextField
              label="Middle Name"
              type="text"
              id="MiddleName"
              name="MiddleName"
              inputProps={{ maxLength: 200 }}
              size="small"
              variant="outlined"
              inputRef={register()}
            />
          </Grid>
          <Grid item className={classes.formItem} xs={6} sm={4}>
            <TextField
              label="Last Name"
              type="text"
              id="LastName"
              name="LastName"
              size="small"
              variant="outlined"
              inputProps={{ maxLength: 200 }}
              helperText={errors.LastName?.message}
              error={!!errors.LastName}
              inputRef={register()}
            />
          </Grid>
          <Grid item className={classes.formItem} md={10} >
            <TextField
              label="Email"
              type="text"
              id="Email"
              name="Email"
              inputProps={{ maxLength: 200 }}
              size="small"
              variant="outlined"
              helperText={errors.Email?.message}
              error={!!errors.Email}
              inputRef={register()}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Address Line 1"
              type="text"
              id="Address"
              name="Address"
              size="small"
              variant="outlined"
              inputProps={{maxLength: 200, }}
              helperText={errors.Address?.message}
              error={!!errors.Address}
              inputRef={register()}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Address Line 2"
              type="text"
              id="AddressExt"
              name="AddressExt"
              size="small"
              variant="outlined"
              inputProps={{maxLength: 200, }}
              inputRef={register()}
            />
          </Grid>
          <Grid item xs={12}>
            <Button
              type="submit"
              variant="contained"
              disabled={!!errors.Email || !!errors.FirstName}
            >
              Submit
            </Button>
          </Grid>
        </Grid>
      </form>
  );
};

export default OnlineApp;
